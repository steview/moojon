<?php
abstract class base_<[model]> extends moojon_base_model {
	
	protected function add_columns() {
		<[columns]>
	}
	
	<[read_all_bys]>
	<[read_bys]>
	<[destroy_bys]>
	<[read_or_create_bys]>
	
	final static public function get_column_names($exceptions = array()) {return self::base_get_column_names(get_class(), $exceptions);}
	final static public function get_editable_column_names($exceptions = array()) {return self::base_get_editable_column_names(get_class(), $exceptions);}
	final static public function get_primary_key_column_names($exceptions = array()) {return self::base_get_primary_key_column_names(get_class(), $exceptions);}
	final static public function get_file_column_names($exceptions = array()) {return self::base_get_file_column_names(get_class(), $exceptions);}
	
	final static public function create($data = null, $param_values = array(), $param_data_types = array()) {return self::base_create(get_class(), $data, $param_values, $param_data_types);}
	final static public function read($where = null, $order = null, $limit = null, $param_values = array(), $param_data_types = array(), moojon_base_model $accessor = null) {return self::base_read(get_class(), $where, $order, $limit, $param_values, $param_data_types, $accessor);}
	final static public function update($data, $where = null, $param_values = array(), $param_data_types = array()) {return self::base_update(get_class(), $data, $where, $param_values, $param_data_types);}
	final static public function destroy($where = null, $param_values = array(), $param_data_types = array()) {return self::base_destroy(get_class(), $where, $param_values, $param_data_types);}
}
?>